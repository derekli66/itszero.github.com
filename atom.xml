<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[[Zero setLogger: self];]]></title>
  <link href="http://itszero.github.com/atom.xml" rel="self"/>
  <link href="http://itszero.github.com/"/>
  <updated>2012-01-08T21:38:15-05:00</updated>
  <id>http://itszero.github.com/</id>
  <author>
    <name><![CDATA[Zero, Chien-An Cho]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying out the impress.js]]></title>
    <link href="http://itszero.github.com/blog/2012/01/06/try-out-impress-js/"/>
    <updated>2012-01-06T02:25:00-05:00</updated>
    <id>http://itszero.github.com/blog/2012/01/06/try-out-impress-js</id>
    <content type="html"><![CDATA[<p>There is a interesting javacsript library being released on the github these days, the <a href="http://bartaz.github.com/impress.js/">impress.js</a>. Impress.js is a framework for making presentations on a open canvas, or so called the <a href="http://prezi.com">Prezi-style</a>. I tried out the Prezi few years ago. It&#8217;s cool, but as the README from the impress.js said: &#8220;impress.js may not help you if you have nothing interesting to say ;)&#8221;. I don&#8217;t really have a chance to make a will-use-on-the-stage presentation on a Prezi.</p>

<p>Fortunately, there is a regular meeting of my lab, and it&#8217;s just my turn to present a read paper this week. I spent a whole night and messed around with the impress.js. You can find my result here: <a href="http://itszero.github.com/attic/dynamic-ua-for-wsn/">A dynamic user authentication scheme for wireless sensor network</a>. I&#8217;m not really get used to arrange contents flat, so the result is not perfect yet.</p>

<p><img src="http://itszero.github.com/images/impressjs_dynamic_ua.png" alt="A presentation made using impress.js" /></p>

<p>It&#8217;s really fun to make slides using HTML5/CSS3, and make them <em>alive</em> through impress.js. For example, I made that Smartcard entirely in the CSS3, which used border-radius and linear-gradient properties. I also used some CSS3 animation property in the Security Analysis section. Once you enter the slide, <em>Login Replay</em> becomes larger and the other two fade out. Next slide zooms in on the detail of login replay, the text will rotate for a little bit to give you a visual clue. You can use whatever CSS3 trick you know to make a presentation. Best of it? You can host it on whatever provider you want since it&#8217;s just some plain HTML/CSS/JS files. Dropbox? Sure. Github? Done.</p>

<p>However, it does have some strange quirk. First, the relative location and zoom-on-active of slides seems not necessarily remain constant across different computer / resolution / browser configuration set. My slides did need some tweak to make sure no text being blocked out on both my iMac 27&#8221; and MacBook Air 13&#8221;. You&#8217;ll need to manually align your slides to the center, so you can expect some negative values on X, Y values. It would be awesome if the library can take care of this of me. :P</p>

<p>In any case, this is still a fascinating library worth you to play with. Get it now on the github and perhaps you can make your own slides, or better, contribute some patches back to the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Dashboard]]></title>
    <link href="http://itszero.github.com/blog/2011/11/18/git-dashboard/"/>
    <updated>2011-11-18T08:57:00-05:00</updated>
    <id>http://itszero.github.com/blog/2011/11/18/git-dashboard</id>
    <content type="html"><![CDATA[<p><img src="http://itszero.github.com/images/posts/git-dashboard.png"></p>

<p>I actually made this dashboard few weeks ago, I&#8217;m just too lazy to write this down. /me <em>flee</em></p>

<p>This dashboard is made for collaboration with teams. I was a hackthon-ing with <a href="http://o0o.cse.tw">bizkit</a> and <a href="http://www.facebook.com/itsftt">ftt</a>. We set up the dashboard to pulls new data from the repository automatically and display in this <em>pretty format</em>. It was only intended for fun but it turns out very useful when merging works from everyone. The tool we used to make it display on the desktop is called <a href="http://mutablecode.com/apps/nerdtool">NerdTool</a>, and it was very easy to setup. You just need to add a new entry with the following command. We have another repository put under <code>~/.gitwatch</code> to prevent the work being interfered when pulling new changes and to eliminate all local branches.</p>

<figure class='code'><figcaption><span>Command for git dashboard</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>date; <span class="nb">cd</span> /Users/Zero/.gitwatch/fun-taipei-fork-of-csim-saycheese; git pull &gt;/dev/null 2&gt;&amp;1; git lp2 --all | head -n 34
</span></code></pre></td></tr></table></div></figure>


<p>Oh, and for the lp2, it&#8217;s actually abbrev. of log command with customized format string. You could add the following entries to your <code>~/.gitconfig</code> file.</p>

<figure class='code'><figcaption><span>Add these to ~/.gitconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[alias]
</span><span class='line'>  lp2 = log --abbrev-commit --decorate --graph --color --pretty=&quot;format:%C(yellow)%h%Cred%d\\ %C(cyan)%an%Creset:\\ %Cgreen%s%Creset\\ %ar&quot; --all
</span></code></pre></td></tr></table></div></figure>


<p>Now, have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaWatch meets Google Maps]]></title>
    <link href="http://itszero.github.com/blog/2011/11/18/meta-watch-meets-google-maps/"/>
    <updated>2011-11-18T08:42:00-05:00</updated>
    <id>http://itszero.github.com/blog/2011/11/18/meta-watch-meets-google-maps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://itszero.github.com/images/posts/MetaPlay.jpg" width="200" title="MetaPlay" ></p>

<p>MetaWatch just shipped out few days ago. Once I got the watch, I starts to play with it, and to see what it is capable to do. I tried to use the intent-based API and put together this little experiment. I use the phone to acquire current location then retrieve Google Maps image for 96x96 display. Before you could deliver images to the watch, you&#8217;ll need to convert it to Black &amp; White image. I used a threshold filter on the luminance channel for this, and the photo above is the result. Kinda fun, but not really useful. Let&#8217;s see what can be done next..</p>

<p>Update: Source code are now available <a href="https://github.com/itszero/MetaLoc">here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved to Octopress]]></title>
    <link href="http://itszero.github.com/blog/2011/10/06/my-octopress-blog/"/>
    <updated>2011-10-06T07:23:00-04:00</updated>
    <id>http://itszero.github.com/blog/2011/10/06/my-octopress-blog</id>
    <content type="html"><![CDATA[<p>Just saw this new blogging system and I think I like the idea. :)
I think I&#8217;ll move to this blog and try to write posts in English here.</p>
]]></content>
  </entry>
  
</feed>
